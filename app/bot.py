import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.utils.token import validate_token, TokenValidationError
from aiogram.client.default import DefaultBotProperties

# --- –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∫–∞–Ω–∞–ª ---
TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "0"))  # ID –∫–∞–Ω–∞–ª–∞ –∏–∑ Railway Variables

if not TOKEN:
    raise RuntimeError("Env BOT_TOKEN is empty. Set it in Railway ‚Üí Variables.")
try:
    validate_token(TOKEN)
except TokenValidationError:
    raise RuntimeError("BOT_TOKEN has invalid format.")

bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def kb(options):
    builder = InlineKeyboardBuilder()
    for text, val in options:
        builder.button(text=text, callback_data=f"v|{val}")
    builder.adjust(1)
    return builder.as_markup()

# --- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
class Quiz(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()

# --- –ù–∞—á–∞–ª–æ ---
@dp.message(CommandStart())
async def start_handler(m: types.Message, state: FSMContext):
    await m.answer("–ü—Ä–∏–≤–µ—Ç üëã –Ø –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å.\n\n–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:")
    await m.answer("üìä –ö–∞–∫–æ–π —É —Ç–µ–±—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç?",
        reply_markup=kb([("<1 –≥–æ–¥–∞","0"),("1‚Äì3 –≥–æ–¥–∞","1"),("3‚Äì5 –ª–µ—Ç","2"),(">5 –ª–µ—Ç","3")]))
    await state.set_state(Quiz.q1)

# --- –í–æ–ø—Ä–æ—Å 1 ---
@dp.callback_query(Quiz.q1)
async def q1_handler(c: types.CallbackQuery, state: FSMContext):
    _, val = c.data.split("|")
    await state.update_data(score=int(val))
    await c.message.edit_text("üß† –ö–∞–∫—É—é –ø—Ä–æ—Å–∞–¥–∫—É —Ç—ã –≥–æ—Ç–æ–≤(–∞) –≤—ã–¥–µ—Ä–∂–∞—Ç—å?",
        reply_markup=kb([("2%","0"),("5%","1"),("10%","2"),("20%+","3")]))
    await state.set_state(Quiz.q2)

# --- –í–æ–ø—Ä–æ—Å 2 ---
@dp.callback_query(Quiz.q2)
async def q2_handler(c: types.CallbackQuery, state: FSMContext):
    _, val = c.data.split("|")
    data = await state.get_data()
    score = data["score"] + int(val)
    await state.update_data(score=score)
    await c.message.edit_text("üí∞ –ö–∞–∫–æ–π —É —Ç–µ–±—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?",
        reply_markup=kb([("<10 000 ‚ÇΩ","0"),("10 000‚Äì50 000 ‚ÇΩ","1"),("50 000‚Äì200 000 ‚ÇΩ","2"),(">200 000 ‚ÇΩ","3")]))
    await state.set_state(Quiz.q3)

# --- –í–æ–ø—Ä–æ—Å 3 ---
@dp.callback_query(Quiz.q3)
async def q3_handler(c: types.CallbackQuery, state: FSMContext):
    _, val = c.data.split("|")
    data = await state.get_data()
    score = data["score"] + int(val)
    await state.update_data(score=score)
    await c.message.edit_text("üßæ –ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?",
        reply_markup=kb([("–ù–µ—Ç –æ–ø—ã—Ç–∞","0"),("1‚Äì3 –≥–æ–¥–∞","1"),("3‚Äì5 –ª–µ—Ç","2"),("–ë–æ–ª–µ–µ 5 –ª–µ—Ç","3")]))
    await state.set_state(Quiz.q4)

# --- –í–æ–ø—Ä–æ—Å 4 ---
@dp.callback_query(Quiz.q4)
async def q4_handler(c: types.CallbackQuery, state: FSMContext):
    _, val = c.data.split("|")
    data = await state.get_data()
    score = data["score"] + int(val)
    await state.update_data(score=score)
    await c.message.edit_text("üéØ –ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å —Ç–≤–æ–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?",
        reply_markup=kb([("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–Ω—å–≥–∏","0"),("–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥","1"),("–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç","2"),("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç","3")]))
    await state.set_state(Quiz.q5)

# --- –í–æ–ø—Ä–æ—Å 5 (—Ä–µ–∑—É–ª—å—Ç–∞—Ç) ---
@dp.callback_query(Quiz.q5)
async def q5_handler(c: types.CallbackQuery, state: FSMContext):
    _, val = c.data.split("|")
    data = await state.get_data()
    score = data["score"] + int(val)

    if score <= 4:
        profile = "C (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π)"
        advice = "–û–±–ª–∏–≥–∞—Ü–∏–∏, –¥–µ–ø–æ–∑–∏—Ç—ã, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫."
    elif score <= 7:
        profile = "M (—É–º–µ—Ä–µ–Ω–Ω—ã–π)"
        advice = "–ß–∞—Å—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏–π + —Ñ–æ–Ω–¥—ã –∞–∫—Ü–∏–π."
    elif score <= 10:
        profile = "B (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"
        advice = "–ü—Ä–æ–ø–æ—Ä—Ü–∏—è –∞–∫—Ü–∏–π –∏ –æ–±–ª–∏–≥–∞—Ü–∏–π, –º–æ–∂–Ω–æ ETF."
    elif score <= 13:
        profile = "G (—Ä–æ—Å—Ç–æ–≤–æ–π)"
        advice = "–ê–∫—Ü–∏–∏, ETF –Ω–∞ –∏–Ω–¥–µ–∫—Å—ã, –Ω–µ–º–Ω–æ–≥–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤."
    else:
        profile = "A (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)"
        advice = "–ê–∫—Ü–∏–∏ —Ä–æ—Å—Ç–∞, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –≤–µ–Ω—á—É—Ä."

    profiles_table = (
        "üìä <b>–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏</b>\n\n"
        "C ‚Äî –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞, –æ–±–ª–∏–≥–∞—Ü–∏–∏, –¥–µ–ø–æ–∑–∏—Ç—ã\n"
        "M ‚Äî –£–º–µ—Ä–µ–Ω–Ω—ã–π: —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç, –æ–±–ª–∏–≥–∞—Ü–∏–∏ + –∞–∫—Ü–∏–∏\n"
        "B ‚Äî –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: –±–∞–ª–∞–Ω—Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ —Ä–∏—Å–∫–∞, –∞–∫—Ü–∏–∏ + –æ–±–ª–∏–≥–∞—Ü–∏–∏\n"
        "G ‚Äî –†–æ—Å—Ç–æ–≤–æ–π: —Ä–æ—Å—Ç –∫–∞–ø–∏—Ç–∞–ª–∞, –∞–∫—Ü–∏–∏, —Ñ–æ–Ω–¥—ã\n"
        "A ‚Äî –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫, –∞–∫—Ü–∏–∏ —Ä–æ—Å—Ç–∞, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É
    await c.message.edit_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!\n\n"
        f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: <b>{profile}</b>\n"
        f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {advice}\n\n"
        f"{profiles_table}\n"
        f"‚ö†Ô∏è –≠—Ç–æ –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    img_path = os.path.join(os.path.dirname(__file__), "assets", "profiles.png")
    if os.path.exists(img_path):
        await c.message.answer_photo(types.FSInputFile(img_path))

    await state.clear()

# --- –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ---
async def send_channel_post():
    if CHANNEL_ID != 0:
        text = (
            "üî• –ö–∞–∫–æ–π —Ç—ã –∏–Ω–≤–µ—Å—Ç–æ—Ä?\n"
            "C ‚Äî –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π üõ°\n"
            "M ‚Äî –£–º–µ—Ä–µ–Ω–Ω—ã–π ‚öñ\n"
            "B ‚Äî –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚ö°\n"
            "G ‚Äî –†–æ—Å—Ç–æ–≤–æ–π üöÄ\n"
            "A ‚Äî –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π üíé\n\n"
            "–ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –≤ –±–æ—Ç–µ –∏ —É–∑–Ω–∞–π —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üëá\n"
            "üëâ @your_bot"
        )
        await bot.send_message(CHANNEL_ID, text)

async def scheduler():
    while True:
        await send_channel_post()
        await asyncio.sleep(3 * 24 * 60 * 60)  # –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
